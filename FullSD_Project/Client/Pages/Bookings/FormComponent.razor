@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Tool: </label>
            <div>
                <InputSelect @bind-Value="booking.ToolId" class="form-control">
                    <option value="">-- Select Tool --</option>
                    @if (Tools != null)
                {
                    foreach (var tool in Tools)
                    {
                    <option value="@tool.Id">@tool.State.Name @tool.Brand.Name - @tool.securitynumber </option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => booking.ToolId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Member: </label>
            <div>
                <InputSelect @bind-Value="booking.MemberId" class="form-control">
                    <option value="">-- Select Member --</option>
                    @if (Members != null)
                {
                    foreach (var member in Members)
                    {
                    <option value="@member.Id">@member.FirstName - @member.MemberCardNo </option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => booking.MemberId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Out: </label>
            <div>
                <InputDate @bind-Value="@booking.DateOut" class="form-control" />
                <ValidationMessage For="@(() => booking.DateOut)" />
            </div>
        </div>


        @if (booking.Id > 0)
        {
            <div class="form-group">
                <label>Date In: </label>
                <div>
                    <InputDate @bind-Value="@booking.DateIn" class="form-control" />
                    <ValidationMessage For="@(() => booking.DateIn)" />
                </div>
            </div>
        }
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="bookings" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Tool> Tools;
    private IList<Member> Members;

    protected async override Task OnInitializedAsync()
    {
        Tools = await _client.GetFromJsonAsync<List<Tool>>($"{Endpoints.ToolsEndpoint}");
        Members = await _client.GetFromJsonAsync<List<Member>>($"{Endpoints.MembersEndpoint}");
        //booking.DateOut = DateTime.Now;
    }
}
