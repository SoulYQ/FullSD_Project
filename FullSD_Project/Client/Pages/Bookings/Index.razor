@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Tool Bookings</h3>
<br />
<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Booking Id</th>
                <th>Member Card Number</th>
                <th>Date</th>
                <th>Duration in days</th>
                <th>security Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.Id</td>
                    <td>@booking.Member.MemberCardNo</td>
                    <td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    @*<td>@((booking.DateIn.Value - booking.DateOut).TotalDays.ToString())</td>*@
                    @*<td>@(booking.DateIn != nullDT ? (booking.DateIn - booking.DateOut).TotalDays.ToString() : "To Be Determined")</td>*@
                    <td>@(booking.DateIn != null ? (booking.DateIn.Value - booking.DateOut).TotalDays.ToString() : "To Be Determined")</td>
                    <td>@booking.Tool.securitynumber</td>
                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Booking> Bookings;
    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

   


    async Task Delete(int bookingId)
    {
        var booking = Bookings.First(q => q.Id == bookingId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
            await OnInitializedAsync();
        }
    }
}